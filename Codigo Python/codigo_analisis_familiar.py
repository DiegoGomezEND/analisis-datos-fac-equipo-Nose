# -*- coding: utf-8 -*-
"""Codigo analisis familiar

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cbi2K2OSQxQittd1RymD0cc6EkAcOWCz
"""

# =========================
# === CODIGOS PARTE B ===
# =========================


# analisis_familiar.py
import pandas as pd
import matplotlib.pyplot as plt
# Leer los datos
df = pd.read_excel('/content/JEFAB_2024.xlsx')
# Análisis de estado civil
print("=== ANÁLISIS ESTADO CIVIL ===")
print(df['ESTADO_CIVIL'].value_counts())
# Análisis de hijos
print("\n=== ANÁLISIS DE HIJOS ===")
print(f"Personal con hijos: {df['HIJOS'].value_counts()}")
# Análisis de convivencia familiar
print("\n=== ANÁLISIS DE CONVIVENCIA ===")
print(f"Habita con familia: {df['HABITA_VIVIENDA_FAMILIAR'].value_counts()}")

# Gráfico de estado civil
plt.figure(figsize=(10, 6))
df['ESTADO_CIVIL'].value_counts().plot(kind='bar')
plt.title('Distribución del Estado Civil')
plt.xlabel('Estado Civil')
plt.ylabel('Cantidad')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import numpy as np

# --- Helpers suaves (no pisan tu df) ---
def _norm_str_col(s):
    return (
        s.astype(str)
         .str.normalize("NFKD")
         .str.encode("ascii", errors="ignore")
         .str.decode("ascii")
         .str.upper()
         .str.strip()
    )

def _safe_numeric(s):
    return pd.to_numeric(s, errors="coerce")

# ==============================
# 1) ¿Qué porcentaje está casado?
# ==============================
try:
    _estado = _norm_str_col(df['ESTADO_CIVIL'])
    pct_casado = 100 * _estado.fillna("").str.contains("CASAD").mean()
    print("\n=== RESPUESTA 1: % CASADO/A ===")
    print(f"Porcentaje casado/a: {pct_casado:.2f}%")
except Exception as e:
    print("\n[Aviso] No se pudo calcular % casado/a:", e)

# ============================================
# Gráficos extra para completar el Storyboard
# ============================================

# ¿Tiene hijos? (vista compacta)
try:
    plt.figure(figsize=(6,6))
    pd.Series(_has_children, name="Tiene hijos").value_counts().sort_index().plot(kind="bar")
    plt.title("¿Tiene hijos? (False/True)")
    plt.xlabel("Tiene hijos")
    plt.ylabel("Cantidad")
    plt.tight_layout()
    plt.show()
except Exception:
    pass

# =======================================================
# 2) ¿Cuántos tienen hijos y cuántos viven con sus hijos?
# =======================================================
print("\n=== RESPUESTA 2: HIJOS Y CONVIVENCIA ===")
_has_children = None
try:
    _hijos_tx = _norm_str_col(df['HIJOS']) if 'HIJOS' in df.columns else None
    _num_hijos = _safe_numeric(df['NUMERO_HIJOS']) if 'NUMERO_HIJOS' in df.columns else None

    if _hijos_tx is not None:
        _has_children = _hijos_tx.map({"SI": True, "S": True, "1": True, "NO": False, "N": False, "0": False})
    if _num_hijos is not None:
        _has_children = pd.Series(
            np.where((_num_hijos.fillna(0) > 0), True, _has_children),
            index=df.index
        )

    if _has_children is None:
        # fallback conservador si no hay columnas
        _has_children = pd.Series(False, index=df.index)

    con_hijos = int((_has_children == True).sum())     # noqa: E712
    sin_hijos = int((_has_children == False).sum())    # noqa: E712
    print(f"Con hijos: {con_hijos} | Sin hijos: {sin_hijos}")

    # --- Viven con hijos ---
    viven_con_hijos_directo = None
    if 'HIJOS_EN_HOGAR' in df.columns:
        _h_en_hogar = _safe_numeric(df['HIJOS_EN_HOGAR'])
        viven_con_hijos_directo = int((_h_en_hogar.fillna(0) > 0).sum())
        print(f"Viven con hijos (directo, HIJOS_EN_HOGAR>0): {viven_con_hijos_directo}")

    if viven_con_hijos_directo is None and 'HABITA_VIVIENDA_FAMILIAR' in df.columns:
        _habita = _norm_str_col(df['HABITA_VIVIENDA_FAMILIAR']).map(
            {"SI": True, "S": True, "1": True, "NO": False, "N": False, "0": False}
        )
        proxy_viven = int(((_has_children == True) & (_habita == True)).sum())   # noqa: E712
        print(f"Viven con hijos (proxy = tiene hijos ∧ habita vivienda familiar): {proxy_viven}")
except Exception as e:
    print("[Aviso] No se pudo evaluar hijos/convivencia:", e)


# ==============================
# Gráfico: ¿Cuántos tienen hijos?
# ==============================

import matplotlib.pyplot as plt

# Conteos
con_hijos = 3669
sin_hijos = 2754

valores = [con_hijos, sin_hijos]
categorias = ["Con hijos", "Sin hijos"]

plt.figure(figsize=(6,5))
plt.bar(categorias, valores, color=["#4CAF50", "#FFC107"])
plt.title("¿Cuántos tienen hijos?")
plt.ylabel("Cantidad de personas")
plt.xlabel("Situación")
for i, v in enumerate(valores):
    plt.text(i, v + 50, str(v), ha="center", fontsize=12)  # etiquetas encima
plt.tight_layout()
plt.show()
import seaborn as sns

if 'HIJOS_EN_HOGAR' in df.columns:
    # Variable: ¿vive con hijos?
    vive_hijos = (pd.to_numeric(df['HIJOS_EN_HOGAR'], errors="coerce").fillna(0) > 0)

    # Variable: ¿tiene hijos?
    tiene_hijos = (pd.to_numeric(df['NUMERO_HIJOS'], errors="coerce").fillna(0) > 0)

    # Tabla de contingencia normalizada
    tabla = pd.crosstab(tiene_hijos, vive_hijos, normalize="index").round(3)

    plt.figure(figsize=(6,4))
    sns.heatmap(tabla, annot=True, cmap="YlGnBu", fmt=".2f")
    plt.title("P(Vive con hijos | Tiene hijos)")
    plt.xlabel("Vive con hijos (HIJOS_EN_HOGAR>0)")
    plt.ylabel("Tiene hijos")
    plt.show()

    print("\n=== TABLA CONVIVENCIA REAL ===")
    print(tabla)
else:
    print("⚠️ No existe la columna HIJOS_EN_HOGAR en el dataset.")

# =================================================
# 3) ¿Relación entre edad y estado civil?
#    (resumen y visualizaciones interpretables)
# =================================================
print("\n=== RESPUESTA 3: RELACIÓN EDAD–ESTADO CIVIL ===")
try:
    if 'EDAD2' in df.columns and 'ESTADO_CIVIL' in df.columns:
        _edad = _safe_numeric(df['EDAD2'])
        _estado = _norm_str_col(df['ESTADO_CIVIL'])
        age_by_estado = (
            pd.DataFrame({"ESTADO": _estado, "EDAD": _edad})
              .groupby("ESTADO")["EDAD"]
              .agg(["count", "mean", "median", "min", "max"])
              .sort_values("count", ascending=False)
              .round(1)
        )
        print("Resumen (Top 5 por tamaño de grupo):")
        print(age_by_estado.head(5))

        # --- Boxplot: edad por estado civil (Top 6) ---
        top_estados = age_by_estado.head(6).index.tolist()
        data = [ _edad[_estado == e].dropna() for e in top_estados ]
        if len(top_estados) >= 2:  # para que el boxplot tenga sentido
            plt.figure(figsize=(10,6))
            plt.boxplot(data, labels=top_estados, showmeans=True)
            plt.title("Distribución de Edad por Estado Civil (Top 6)")
            plt.ylabel("Edad")
            plt.xticks(rotation=20, ha="right")
            plt.tight_layout()
            plt.show()

        # --- Curva: % con hijos por grupo de edad ---
        bins = [17,25,30,35,40,45,50,55,60,70]
        if _edad.notna().any():
            grupos = pd.cut(_edad, bins=bins, right=True)
            tab = pd.crosstab(grupos, _has_children.fillna(False), normalize="index").round(3)
            if True in tab.columns:
                plt.figure(figsize=(8,5))
                xlabels = tab.index.astype(str)
                yvals = tab[True] * 100
                plt.plot(range(len(xlabels)), yvals, marker="o")
                plt.title("% con hijos por grupo de edad")
                plt.xlabel("Grupo de edad")
                plt.ylabel("% con hijos")
                plt.xticks(ticks=range(len(xlabels)), labels=xlabels, rotation=45, ha="right")
                plt.tight_layout()
                plt.show()
    else:
        print("Faltan columnas EDAD2 o ESTADO_CIVIL.")
except Exception as e:
    print("[Aviso] No se pudo evaluar relación edad–estado civil:", e)

# =======================================================
# Extra: % con hijos que viven con ellos por grupo de edad
# =======================================================

import matplotlib.pyplot as plt
import pandas as pd

# Convertir columnas a numéricas
edad = pd.to_numeric(df["EDAD2"], errors="coerce")
num_hijos = pd.to_numeric(df["NUMERO_HIJOS"], errors="coerce")
hijos_en_hogar = pd.to_numeric(df["HIJOS_EN_HOGAR"], errors="coerce")

# Filtrar solo quienes tienen hijos
mask_con_hijos = num_hijos.fillna(0) > 0
df_hijos = df[mask_con_hijos].copy()

df_hijos["_EDAD_"] = edad[mask_con_hijos]
df_hijos["_VIVE_HIJOS_"] = hijos_en_hogar[mask_con_hijos].fillna(0) > 0

# Agrupar por rangos de edad
bins = [17, 25, 30, 35, 40, 45, 50, 55, 60, 70]
labels = [f"{bins[i]}-{bins[i+1]}" for i in range(len(bins)-1)]
df_hijos["_GRUPO_EDAD_"] = pd.cut(df_hijos["_EDAD_"], bins=bins, labels=labels, right=True)

# Calcular proporción
tabla = df_hijos.groupby("_GRUPO_EDAD_")["_VIVE_HIJOS_"].mean() * 100

# Gráfico de línea
plt.figure(figsize=(8,5))
tabla.plot(marker="o", color="#2196F3")
plt.title("% de personas con hijos que viven con ellos por grupo de edad")
plt.xlabel("Grupo de edad")
plt.ylabel("% que vive con al menos un hijo")
plt.xticks(rotation=45)
plt.grid(True, linestyle="--", alpha=0.6)
plt.tight_layout()
plt.show()

print("\n=== Tabla de porcentajes por grupo de edad ===")
print(tabla.round(1).astype(str) + " %")